{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blake\\\\LearnReact\\\\React\\\\git-track\\\\client\\\\src\\\\components\\\\Languages.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styling/languages.css';\nimport LanguageFocus from './LanguageFocus';\n\n// Utility function to find the largest repository for each language\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst findLargestReposByLanguage = repos => {\n  const largestRepos = {};\n  repos.forEach(repo => {\n    Object.keys(repo.languages).forEach(language => {\n      if (!largestRepos[language] || repo.size > largestRepos[language].size) {\n        largestRepos[language] = {\n          ...repo,\n          language\n        };\n      }\n    });\n  });\n  return largestRepos;\n};\nconst Languages = ({\n  userRepos\n}) => {\n  _s();\n  const [topLanguages, setTopLanguages] = useState([]);\n  const [selectedLanguage, setSelectedLanguage] = useState();\n  const [selectedLanguageRatio, setSelectedLanguageRatio] = useState();\n  const [largestRepoByLanguage, setLargestRepoByLanguage] = useState({});\n  const colors = ['#FF6666', '#63618E', '#FFA500', '#20B2AA', '#FFD700', '#D3FFCE', '#F633FF', '#FF8833', '#33FF88', '#8833FF'];\n\n  // Effect to calculate language data and largest repos on load\n  useEffect(() => {\n    if (!userRepos) return;\n    setLargestRepoByLanguage(findLargestReposByLanguage(userRepos));\n    const languageCount = {};\n    let totalSize = 0;\n    userRepos.forEach(repo => {\n      Object.keys(repo.languages).forEach(language => {\n        const languageValue = repo.languages[language];\n        languageCount[language] = (languageCount[language] || 0) + languageValue;\n        totalSize += languageValue;\n      });\n    });\n    const languagePercentages = Object.fromEntries(Object.entries(languageCount).map(([language, count]) => [language, count / totalSize * 100]));\n    const sortedLanguages = Object.entries(languagePercentages).sort((a, b) => b[1] - a[1]).slice(0, 6);\n    setTopLanguages(sortedLanguages);\n    if (sortedLanguages.length > 0) {\n      const firstLanguage = sortedLanguages[0][0];\n      setSelectedLanguage(firstLanguage);\n      setSelectedLanguageRatio(sortedLanguages[0][1].toFixed(1));\n    }\n  }, [userRepos]);\n\n  // Handler for language selection\n  const handleLanguageClick = language => {\n    setSelectedLanguage(language);\n    const languageData = topLanguages.find(([lang, _]) => lang === language);\n    if (languageData) {\n      setSelectedLanguageRatio(languageData[1].toFixed(1));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"language-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"languages\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"language-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"LANGUAGES\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          className: \"language\",\n          children: topLanguages.map(([language, _percentage], index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"language-item\",\n            onClick: () => handleLanguageClick(language),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"language-color\",\n              style: {\n                backgroundColor: colors[index % colors.length]\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"language-name\",\n              children: language\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(LanguageFocus, {\n        language: selectedLanguage,\n        languageRatio: selectedLanguageRatio,\n        repos: [largestRepoByLanguage[selectedLanguage]]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"language-bar-container\",\n      children: topLanguages.map(([language, percentage], index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"language-bar-item\",\n        style: {\n          width: `${percentage}%`,\n          backgroundColor: colors[index % colors.length]\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n_s(Languages, \"1UV07bSN3OSA7Z0LD9fx0VX9uGI=\");\n_c = Languages;\nexport default Languages;\nvar _c;\n$RefreshReg$(_c, \"Languages\");","map":{"version":3,"names":["React","useState","useEffect","LanguageFocus","jsxDEV","_jsxDEV","findLargestReposByLanguage","repos","largestRepos","forEach","repo","Object","keys","languages","language","size","Languages","userRepos","_s","topLanguages","setTopLanguages","selectedLanguage","setSelectedLanguage","selectedLanguageRatio","setSelectedLanguageRatio","largestRepoByLanguage","setLargestRepoByLanguage","colors","languageCount","totalSize","languageValue","languagePercentages","fromEntries","entries","map","count","sortedLanguages","sort","a","b","slice","length","firstLanguage","toFixed","handleLanguageClick","languageData","find","lang","_","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_percentage","index","onClick","style","backgroundColor","languageRatio","percentage","width","_c","$RefreshReg$"],"sources":["C:/Users/blake/LearnReact/React/git-track/client/src/components/Languages.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../styling/languages.css';\r\nimport LanguageFocus from './LanguageFocus';\r\n\r\n// Utility function to find the largest repository for each language\r\nconst findLargestReposByLanguage = (repos) => {\r\n    const largestRepos = {};\r\n    repos.forEach(repo => {\r\n        Object.keys(repo.languages).forEach(language => {\r\n            if (!largestRepos[language] || repo.size > largestRepos[language].size) {\r\n                largestRepos[language] = { ...repo, language };\r\n            }\r\n        });\r\n    });\r\n    return largestRepos;\r\n};\r\n\r\nconst Languages = ({ userRepos }) => {\r\n    const [topLanguages, setTopLanguages] = useState([]);\r\n    const [selectedLanguage, setSelectedLanguage] = useState();\r\n    const [selectedLanguageRatio, setSelectedLanguageRatio] = useState();\r\n    const [largestRepoByLanguage, setLargestRepoByLanguage] = useState({});\r\n    const colors = ['#FF6666', '#63618E', '#FFA500', '#20B2AA', '#FFD700', '#D3FFCE', '#F633FF', '#FF8833', '#33FF88', '#8833FF'];\r\n\r\n    // Effect to calculate language data and largest repos on load\r\n    useEffect(() => {\r\n        if (!userRepos) return;\r\n\r\n        setLargestRepoByLanguage(findLargestReposByLanguage(userRepos));\r\n\r\n        const languageCount = {};\r\n        let totalSize = 0;\r\n        userRepos.forEach(repo => {\r\n            Object.keys(repo.languages).forEach(language => {\r\n                const languageValue = repo.languages[language];\r\n                languageCount[language] = (languageCount[language] || 0) + languageValue;\r\n                totalSize += languageValue;\r\n            });\r\n        });\r\n\r\n        const languagePercentages = Object.fromEntries(\r\n            Object.entries(languageCount).map(([language, count]) => [language, (count / totalSize) * 100])\r\n        );\r\n        const sortedLanguages = Object.entries(languagePercentages).sort((a, b) => b[1] - a[1]).slice(0, 6);\r\n\r\n        setTopLanguages(sortedLanguages);\r\n        if (sortedLanguages.length > 0) {\r\n            const firstLanguage = sortedLanguages[0][0];\r\n            setSelectedLanguage(firstLanguage);\r\n            setSelectedLanguageRatio(sortedLanguages[0][1].toFixed(1));\r\n        }\r\n    }, [userRepos]);\r\n\r\n    // Handler for language selection\r\n    const handleLanguageClick = (language) => {\r\n        setSelectedLanguage(language);\r\n        const languageData = topLanguages.find(([lang, _]) => lang === language);\r\n        if (languageData) {\r\n            setSelectedLanguageRatio(languageData[1].toFixed(1));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='language-container'>\r\n            {/* Language list */}\r\n            <div className='languages'>\r\n                <div className='language-list'>\r\n                    <h1>LANGUAGES</h1>\r\n                    <ol className='language'>\r\n                        {topLanguages.map(([language, _percentage], index) => (\r\n                            <li key={index} className='language-item' onClick={() => handleLanguageClick(language)}>\r\n                                <div className='language-color' style={{ backgroundColor: colors[index % colors.length] }}></div>\r\n                                <span className='language-name'>{language}</span>\r\n                            </li>\r\n                        ))}\r\n                    </ol>\r\n                </div>\r\n                {/* Language focus section */}\r\n                <LanguageFocus\r\n                    language={selectedLanguage}\r\n                    languageRatio={selectedLanguageRatio}\r\n                    repos={[largestRepoByLanguage[selectedLanguage]]}\r\n                />\r\n            </div>\r\n            {/* Language usage bar */}\r\n            <div className='language-bar-container'>\r\n                {topLanguages.map(([language, percentage], index) => (\r\n                    <div\r\n                        key={index}\r\n                        className='language-bar-item'\r\n                        style={{ width: `${percentage}%`, backgroundColor: colors[index % colors.length] }}\r\n                    ></div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Languages;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}